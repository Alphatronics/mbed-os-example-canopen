# This is a basic workflow to help you get started with Actions

name: CI master

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    env:
      TARGET_MACHINE: NUCLEO_F091RC

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      - name: Show TARGET
        run: |
          echo "Target is ${{ env.TARGET_MACHINE }}"
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Install Python
        uses: actions/setup-python@v2.2.2
        with:
            # Version range or exact version of a Python version to use, using SemVer's version range syntax.
            python-version: 2.x

      - name: Install arm-none-eabi-gcc
        # You may pin to the exact commit or the version.
        # uses: fiam/arm-none-eabi-gcc@77f4527db18a17bf6def2cfeeea231f7bfa50902
        uses: fiam/arm-none-eabi-gcc@v1.0.2
        with:
            # GNU Embedded Toolchain for Arm release name, in the V-YYYY-qZ format (e.g. "9-2019-q4")
            release: "7-2018-q2"
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
            
      - name: Show Python/pip/git/gcc versions
        run: |
            echo "---------------------------------------------------"
            python --version
            echo "---------------------------------------------------"
            pip --version
            echo "---------------------------------------------------"
            git --version
            echo "---------------------------------------------------"
            arm-none-eabi-gcc --version
            echo "---------------------------------------------------"
            wget --version

      - name: Install python/mbed/gcc requirements
        run: |
            echo "Installing mbed cli"
            pip install mbed-cli==1.10.0
            echo "---------------------------------------------------"
            echo "Downloading mbed-os 5.15 requirements.txt"
            wget "https://raw.githubusercontent.com/ARMmbed/mbed-os/mbed-os-5.15/requirements.txt"
            echo "---------------------------------------------------"
            echo "Installing requirements using pip"
            pip install -r requirements.txt
            echo "---------------------------------------------------"
            mbed --version
            echo "---------------------------------------------------"
            GCC_BIN=$(which arm-none-eabi-gcc | awk -F'arm' '{print $1}')
            echo "GCC PATH = $GCC_BIN"
            mbed config -G GCC_ARM_PATH "$GCC_BIN"

      - name: Mbed deploy
        run: mbed deploy -v

      - name: Mbed compile
        run: mbed compile -t GCC_ARM -m ${{ env.TARGET_MACHINE }}
           
